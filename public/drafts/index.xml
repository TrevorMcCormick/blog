<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on Trevor&#39;s Blog</title>
    <link>https://trmccormick.com/drafts/</link>
    <description>Recent content in Drafts on Trevor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Trevor McCormick</copyright>
    <lastBuildDate>Thu, 08 Jul 2021 09:08:22 -0400</lastBuildDate><atom:link href="https://trmccormick.com/drafts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üèÉüí® Save 230ms Page Load Time by Asynchronously Loading Google Fonts</title>
      <link>https://trmccormick.com/drafts/asynchronous_google_fonts/</link>
      <pubDate>Thu, 08 Jul 2021 09:08:22 -0400</pubDate>
      
      <guid>https://trmccormick.com/drafts/asynchronous_google_fonts/</guid>
      <description>How your browser loads this page After you type in the URL to a website, some administrative magic happens behind the scenes. Here is a sketch of the entire website build, with the browser&amp;rsquo;s request and download happening on the left side of the image:
When you load a website, you can use Chrome&amp;rsquo;s DevToolsto view how your browser is downloading, organizing, and delivering content from a website to your browser.</description>
    </item>
    
    <item>
      <title>ü§û Article Ideas</title>
      <link>https://trmccormick.com/drafts/article_ideas/</link>
      <pubDate>Thu, 04 Feb 2021 11:20:22 -0400</pubDate>
      
      <guid>https://trmccormick.com/drafts/article_ideas/</guid>
      <description> Automating the Web with Python: Requests, BeautifulSoup, and Selenium  https://scrapingant.com/blog/scrape-dynamic-website-with-python   Adding Functionality to the Adobe Audience Manager API with Python One-Page Visualization Cheatsheet for Telling Stories with Data Data Engineering Frameworks   Volume, Velocity, Variety Structured, Unstructured, Semi-structured Batch versus Streaming Storage: Data Warehouses, Data Lakes, Lakehouse Platforms Data Science Workflow: Ingest, Clean, Curate, Analyze, Democratize   Removing PII Across Time Travel Versions with Databricks Amazon Connect &amp;ndash; Live Stream Phone Call Transcriptions Build a Disney+ clone for Xavier Basketball videos Xavier Basketball Scout &amp;ndash; Fast Highlights Asynchronously Loading Google Fonts: Saving 200ms Page Load  </description>
    </item>
    
  </channel>
</rss>
